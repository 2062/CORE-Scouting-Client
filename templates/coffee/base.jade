:coffeescript

	#    ____      _____    ______
	#  _[░░░░]_   [░░░░░]  [░░░░░░]
	# [░]````[░] [░]_`_`   [░]```[░]
	# [░]     _   `[░░░]_  [░]    [░]
	# [░]____[░]   _`_`[░] [░]___[░]
	#  `[░░░░]`   [░░░░░]  [░░░░░░]
	#    ````      `````    ``````
	# --- CORE Scouting Database ---

	
	#       ________           ___________    _____________
	#     _[░░░░░░░░]_       _[░░░░░░░░░░░]  [░░░░░░░░░░░░░]_
	#   _[░░░]````[░░░]_    [░░░░░]```````   [░░░]``````[░░░░]
	#  [░░░]`      `[░░░]  [░░░░]`           [░░░]       `[░░░]
	# [░░░]          ```    [░░░░░]___       [░░░]         [░░░]
	# [░░░]                  ```[░░░░░]__    [░░░]         [░░░]
	# [░░░]          ___         ``[░░░░░]   [░░░]         [░░░]
	#  [░░░]_      _[░░░]           _[░░░░]  [░░░]       _[░░░]
	#   `[░░░]____[░░░]`    _______[░░░░░]   [░░░]______[░░░░]
	#     `[░░░░░░░░]`  0  [░░░░░░░░░░░]` 0  [░░░░░░░░░░░░░]`  0
	#       ````````        ```````````       `````````````
	#               --- CORE Scouting Database ---

	#Chosen Select Box
	#$("select").chosen()

	#ToggleJS
	#$(":checkbox").toggleSwitch()

	#Tipsy
	$("a[title], label[title], button[title], textarea[title]").tipsy()
	$("input[title]").tipsy
		trigger: "focus"
		gravity: "w"

	$(".toggle-container[title]").tipsy
		trigger: "hover"
		gravity: "w"

	p = (text) -> console.log text # friendly little alias

	p 'Hello and welcome to the CSD, a intuitive scouting database and analysis program created by Sean Lang of CORE 2062.'


	class Router extends Backbone.Router
		###
			forward changes in the route to the navigation view
		###
		routes:
			"*subpage": "change_page"

		initialize: (options) ->
			# assign a model during init like in a view
			@model = options.model

		change_page: (page) ->
			if page isnt "" then @model.set({'page': page})
						
	class Nav extends Backbone.Model
		###
			keep track of the current page and subpage. also determine what should be rendered in the navbar on any given page
		###
		defaults:
			page: 'synopsis'

	class NavView extends Backbone.View
		###
			NavView modifies the navbar to show the correct subpages for the current page
		###
		el: $ '#navbar'  # element already exists in markup

		render: ->
			page = @model.get('page')

			# set the title of the page
			document.title = "#{page.replace("_", " ").titleCase()} | CSD"

			# ensure that the correct navbar button is selected
			# since it is a radio button, it unselects anything else
			@$el.find('#' + page + '_nav').attr "checked", true 

			$("#jGrowl-container").jGrowl "(nav) page: #{@model.get("page")}",

		initialize: ->
			_.bindAll @
			@model.bind('change', @render)
			@render()

	class Account extends Backbone.Model
		defaults: #default user object for user who isn't logged in (no cookie is stored for this user)
			_id: ""
			token: "" # token must not be sent to server in a cookie due to possible CSRF attacks
			info:
				fName: "Guest"
				lName: ""
				team: 0
			prefs:
				fade: true
				verbose: true

	class AccountView extends Backbone.View
		###
			NavView modifies the navbar to show the correct subpages for the current page
		###
		el: $ '#account_bar'  # element already exists in markup

		render: ->

		initialize: ->
			_.bindAll @
			@model.bind('change', @render)
			@render()

	class AppView extends Backbone.View

		initialize: ->
			@Nav = new Nav()
			@NavView = new NavView({model: @Nav})
			@Router = new Router({model: @Nav})

	$ ->
		window.App = new AppView()
		Backbone.history.start()



	#TODO: float google +1 button left w/out 4px overhang
	#TODO: make startup script to warn bad browsers
	#TODO: add stuff to prefetch subpages
	#TODO: add error message for old browsers

	#error logger TODO: test error logger
	window.onerror = (msg, url, line) ->
		$("#jGrowl-container").jGrowl 'errorMsg:' + msg + ' on line ' + line,
			theme: "error"
			sticky: true

		#TODO: post error to server to record

		false #let default error handler continue

	#UI Event Handlers
	$("input, textarea").focus ->
		$(this).parentsUntil($("form"), 'fieldset').addClass 'focus' #set fieldset class on focus

	$("input, textarea").focusout ->
		$(this).parentsUntil($("form"), 'fieldset').removeClass 'focus'

	$(".clearIcon span").click -> #clear input icon
		input = @previousSibling
		input.value = ""
		input.focus()

	#general functions
	String::titleCase = ->
		@replace /\w\S*/g, (txt) ->
			txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()