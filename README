This is the CORE Scouting Database (CSD)... /* make Kremer or Evan write something nice here */.

RULES:

1. I am not responsible in any way for anything that happens to anyone as a result of anything that I have made. This is totally provided AS IS, however I would like people to report bugs (but I cannot be held responsible for them).

2. The code provided here is only to be used for reference / academic purposes (you may learn from the code here, read it, and see how it works, but you may not copy it). This project may not be redistributed / copied / used / hosted without my explicit permission. By downloading / viewing any part of this project, you agree to these terms. Contact me at slang800@gmail.com.


WHY:

2. This rule is necessary because I want to keep the database centralized, not in terms of server location (because it would probably be faster to use a distributed network of servers) but in terms of data ownership*. Having the data divided between two owners harms the ability of both of them to do accurate real time analysis. Also, if people host their own scouting database for their team, then only their team will benefit from the data that is collected. Sadly, I'm not really sure how to implement a clause like this without impeding people's ability to use my code on similar projects, or their own scouting database.

I actually want people to benefit from using my code; you can contact me, and I will probably let you use whatever code you want. Rather, I do not want people to redistribute this site as their own scouting database, because that would decentralize the collection of data, and reduce the usefulness of the original site (because: competition with another scouting database = less users = less data = less accurate analysis on our site). Also, users with a copy of the original site would not be provided with updates which our team releases... If you would like to improve the site, join the development team.



* = When I say "data ownership", I just mean who has the data; I am actually creating a data liberation program similar to Google's which allows users (and entire teams) to download all data that they have submitted... you get the idea.

/*TODO reword this so it sounds better */


/*make someone write a license here/ modify a existing one... look at MIT License, or GPL*/




ramblings:

	PHP embeds pages based on user id, and popularity of page (can't actually see page hash requested)
	JS reads hash & searches the page for the sub-page requested
	if requested page is found, then that is presented, otherwise it is downloaded (from catche or from page.php)
	page.php takes necessary components to build the page and sends it to JS via AJAX

	all scripts in top directory are to be requested by browser directly, scripts in php directory are referenced by other scripts & cannot be requested by browser


	Official Terms:

	Site: index.php, which acts as the container for all pages
	Page: a set of sub-pages, and modals within the site (like input, home, or query)
	Subpage: a piece of a page, only one subpage is displayed at a time
	Modal: a dialog which gets overlaid on top of the site, some pages require specific modals, and these are sent with the page request
	Base Page: page components which are needed for more than 1 page, these are embedded on first page request
    
    How The Site Directories Are Setup:

    /less: just for development, and should not be on a production server. files in this folder are used to create the css files in /css
    /css: contains all css files which are used by index.php to create the requested page (they are embedded into the response)
    /php: these files are scripts called by the scripts in the top directory / other directories and should not be accessable by anyone other than the user php runs under (so they may not be accessed by the public)
    /js: contains all javascript files which are used by index.php to create the requested page (they are embedded into the response)
    /js/libraries: contains js files which are combined together and added to each request as the base libraries
    /firephp: just used for FirePHP (development tool), remove before production
    /font: contains all font files
    /tmp: contains temporary files cached to speed up various functions
    /html: contains html & path files which are called by index.php
    /dev: just for development, if global devmode = false then nothing here should be called



	--- main TODO ---

	make blank default value for select boxes blank (and add error checking to prevent this from being submitted)
	general alert/action modal
	rewrite permissions
	rewrite authentication
	poll function

	performance
		add gzip to server
		move all js scripts & static resources to cookie-less sub-domain
		make fonts store in cache
		use scoutID to determine embedded pages (besides base) - based on most accessed or permissions
		cache AJAX content (only for pages, not other stuff)


	compatibility
		IE
			make a kill IE 6 page like http://themeforest.net/item/kill-ie6-template/full_screen_preview/795628
			make a IE compatible style sheet

		other browsers
			fix font rendering across browsers - check support for @fontface

		external sites/SEO/other
			make sure links on facebook contain a nice description of the site
			make openid / login from other site
			make a 404 page
			provide link to github on site???

		durability / reusability
			make sure highlight color can be changed

	
	big / general features
		make some type of framework for interfacing between the client & server functions (replace hierarchies of switches)
		wiki style editing
		team images/robot images/other graphics associated w/ each team (used in team lookup)
		blue alliance like public side w/ only basic data (data gathering and analysis on member side)
		allow attachment of videos to matches (low priority - much later)
		add offline scouting mode for competitions without internet access

		Add analytics to track visitors on page by page basis (and get browser + OS + ip + other stuff)
			switch to non-hashtag based navigation so php can read it
			use client side logging (log gets submitted in polling)


	minor fixes / add features
		add color picker, or at least color input to account settings page (for background of site)
		make signup page hidden when logged in (or just not sent when a valid cookie is given w/ request)
		make a small drop-down for the nav button that gives the page categories
		move public analysis to new page - out of analysis???
		on login, check if training was finished for that page
		make jGrowl append to top of scrollable box

		store scouting data during error to a cookie
			attempt to resubmit (ok if it's submitted twice)
			delete cookie and display jGrowl when sent
		
		form / input
			style
				fix color of toggle control & maybe add texture like google has
				add blue shadow to selectbox
				combine + button into input?
				add styling for disabled controls

			make + button on keyboard increment && - button on keyboard decrement
			add tracking for progress of AJAX download - use green bar on progress bar to show download
			make competition selector on page - use php to fill
			add code to select boxes for disabling specific options depending on what is selected - probably use "on change"

	consider
		manual sending of data on error
			make popup in new window / tab / modal
				opens a page that retrieves & displays data from the cookie (using base64 encoded js/html)
				contains instructions on how to save and resubmit data
				message: paste the saved data into the box, and it will be sent to the database, do not modify the data in anyway or it will fail upon detecting out of range, or mis-formatted data. If it is not possible to send it from this computer... contact me/send it to me.
			or make it open modal with instructions to save link as (demo in untitled.html)
			make a "upload direct button" in input (and a corresponding modal) to let people send data in json manually
			make it work for blank scoutid / logout / other stuff???


	unsorted junk
		add check to php for duplicate data (in case of 2x submission)
		make submit button disabled after sending (add class disabled?), until next error check is run (or something that prevents 2X clicking)
		or make button disable at start of script and re-enable at end
		make submit button disabled when form is blank

		

		if scouting entry matches a existing entry in some categories, but other areas of the original entry are blank, fill in blanks (used to pre-fill match robots & match numbers.

		if there is something that doesn't match (but match numbers are the same) then write the parts that don't match to a error field (and affects error count)

		above things are about compiled database table, in normal submit, data is written to row, no checking is done, blank fields are ignored. each row is a separate entry, even if they are duplicates.
		in complied table, all entries are searched and formed into a final table, all errors sorted out. 1 match in each row.

		scouting 
			pickup balls from wall or bridge
			printout sheet - summary of alliance competing against
				log of important events (like robot dieing during match)

		Data analysis: select / load data group -> show in graph, editable
		Compare teams
		Compare strategies
			http://tablesorter.com/docs/
			http://tablesorter.com/docs/example-pager.html
		use JSON to send array for table data or graph data (format with client side JS)